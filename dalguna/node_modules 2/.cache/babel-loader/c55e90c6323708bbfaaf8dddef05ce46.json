{"ast":null,"code":"var _jsxFileName = \"/Users/HS/Documents/GitHub/dalguna/dalguna/dalguna/src/pages/Main.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\nimport { collection, onSnapshot, updateDoc, doc } from \"firebase/firestore\";\nimport { db } from \"../firebase-config.js\";\nimport RoomCard from '../components/RoomCard';\nimport CatFilter from './CatFilter';\nimport CatItem from '../components/CatItem';\nimport RestCard from '../components/RestCard.js';\nimport NavBar from '../components/NavBar.js';\nimport TabBar from '../components/TabBar.js';\nimport CartModal from \"../components/CartModal\";\nimport staticDB from \"../db/static.json\";\nimport dhspic from '../img/DHS_photo.jpeg';\nimport \"../main.css\";\n\nfunction Main() {\n  const curAddr = \"아름관\";\n  const restInfo = staticDB;\n  const [roomInfo, setRoomInfo] = useState([]);\n  const [isUserParticipants, setIsUserParticipants] = useState(false);\n  const catInfoList = [{\n    name: \"Korean\",\n    img: dhspic\n  }, {\n    name: \"Japanese\",\n    img: dhspic\n  }, {\n    name: \"Snacks\",\n    img: dhspic\n  }, {\n    name: \"Asian\",\n    img: dhspic\n  }, {\n    name: \"Salad\",\n    img: dhspic\n  }, {\n    name: \"Doshirak\",\n    img: dhspic\n  }, {\n    name: \"중국집\",\n    img: dhspic\n  }, {\n    name: \"덮밥\",\n    img: dhspic\n  }];\n\n  const stringToTime = str => {\n    const [hour, minute] = str.split(':').map(el => parseInt(el));\n    return hour * 60 + minute;\n  };\n\n  const restList = restInfo.filter(rest => {\n    const nowTime = new Date().getHours() * 60 + new Date().getMinutes();\n    return stringToTime(rest.open) <= nowTime && nowTime <= stringToTime(rest.close);\n  }).map((rest, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    style: {\n      listStyle: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: `./restaurant/${rest.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(RestCard, {\n    restInfo: rest,\n    roomInfo: roomInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 43\n    }\n  }))));\n  const catList = catInfoList.map((cat, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    style: {\n      listStyle: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `./filter/${cat.name}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \" \", /*#__PURE__*/React.createElement(CatItem, {\n    img: cat.img,\n    name: cat.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 46\n    }\n  }), \" \")));\n  const [myRoomCard, setMyRoomCard] = useState( /*#__PURE__*/React.createElement(React.Fragment, null));\n  const [otherRoomList, setOtherRoomList] = useState( /*#__PURE__*/React.createElement(React.Fragment, null));\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate();\n\n  function getRooms() {\n    onSnapshot(collection(db, \"rooms\"), snapshot => {\n      const tmp = [];\n      snapshot.forEach(doc => tmp.push({\n        room_id: doc.id,\n        room: doc.data()\n      }));\n      setRoomInfo(tmp.map(_ref => {\n        let {\n          room,\n          room_id\n        } = _ref;\n        const roomInfoObj = {\n          'roomId': room_id,\n          'restName': room.restName,\n          'addr': room.addr,\n          'ordStat': room.ordStat,\n          'parti': room.parti,\n          'endTime': room.endTime,\n          'timeLeft': parseInt((room.endTime.seconds - new Date().getTime() / 1000) / 60),\n          'rest': restInfo.filter(rest => rest.name == room.restName)[0],\n          'poolMon': room.parti.reduce((money, menu) => money + menu.price, 0)\n        };\n\n        if (room.parti.filter(el => el.id === userId).length !== 0) {\n          setMyRoomCard( /*#__PURE__*/React.createElement(Link, {\n            to: {\n              pathname: `./${room_id}`\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 25\n            }\n          }, \" \", /*#__PURE__*/React.createElement(RoomCard, {\n            roomInfo: roomInfoObj,\n            photo: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 63\n            }\n          })));\n          setOtherRoomList( /*#__PURE__*/React.createElement(React.Fragment, null));\n          setIsUserParticipants(true);\n        }\n\n        return roomInfoObj;\n      }));\n      updateDoc(doc(db, \"users\", userId), {\n        curRoomId: \"\"\n      });\n    });\n  }\n\n  useEffect(() => {\n    getRooms();\n  }, []);\n\n  function handleRoomEnter(roomId, restName) {\n    updateDoc(doc(db, \"users\", userId), {\n      curRoomId: roomId\n    });\n    const restId = restInfo.filter(_ref2 => {\n      let {\n        name\n      } = _ref2;\n      return name === restName;\n    })[0].id;\n\n    if (window.confirm(\"먼저 배달음식을 담아주세요\")) {\n      navigate(`./restaurant/${restId}`);\n    }\n\n    console.log(roomId);\n  }\n\n  useEffect(() => {\n    if (isUserParticipants) {} else {\n      console.log(roomInfo);\n      setMyRoomCard( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mainPage__noYourRoom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, \"\\uCC38\\uC5EC\\uD558\\uC2DC\\uB294 \\uBC29\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"));\n      setOtherRoomList( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mainPage__separation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mainPage__title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, \"Room Suggestions\"), /*#__PURE__*/React.createElement(\"ul\", {\n        style: {\n          margin: 0\n        },\n        className: \"mainPage__room-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }, roomInfo.filter(el => el.addr === curAddr).map((room, i) => /*#__PURE__*/React.createElement(\"li\", {\n        key: i,\n        style: {\n          listStyle: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        onClick: () => handleRoomEnter(room.roomId, room.restName),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }, \" \", /*#__PURE__*/React.createElement(RoomCard, {\n        roomInfo: room,\n        photo: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 83\n        }\n      })))))));\n    }\n  }, [roomInfo, isUserParticipants]); // [Not Solved] 근데 my room 이 생긴 상태의 사람은 suggestion 없애야할듯\n  // for (const room of roomInfo) {\n  //   room['rest'] = restInfo.filter((rest) => rest.name == room.restName)[0];\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainPage__\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"105px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainPage__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, \"Food Categories\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"mainPage__cat-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, catList), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainPage__separation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainPage__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Your Room\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainPage__room-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, myRoomCard), otherRoomList, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainPage__separation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainPage__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"Restaurant List\"), /*#__PURE__*/React.createElement(\"ul\", {\n    style: {\n      margin: 0\n    },\n    className: \"mainPage__rest-card-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, restList)));\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/HS/Documents/GitHub/dalguna/dalguna/dalguna/src/pages/Main.js"],"names":["React","useState","useEffect","Link","useParams","useNavigate","collection","onSnapshot","updateDoc","doc","db","RoomCard","CatFilter","CatItem","RestCard","NavBar","TabBar","CartModal","staticDB","dhspic","Main","curAddr","restInfo","roomInfo","setRoomInfo","isUserParticipants","setIsUserParticipants","catInfoList","name","img","stringToTime","str","hour","minute","split","map","el","parseInt","restList","filter","rest","nowTime","Date","getHours","getMinutes","open","close","i","listStyle","id","catList","cat","pathname","myRoomCard","setMyRoomCard","otherRoomList","setOtherRoomList","userId","navigate","getRooms","snapshot","tmp","forEach","push","room_id","room","data","roomInfoObj","restName","addr","ordStat","parti","endTime","seconds","getTime","reduce","money","menu","price","length","curRoomId","handleRoomEnter","roomId","restId","window","confirm","console","log","margin","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\nimport { collection, onSnapshot, updateDoc, doc } from \"firebase/firestore\";\nimport { db } from \"../firebase-config.js\";\n\nimport RoomCard from '../components/RoomCard';\nimport CatFilter from './CatFilter';\nimport CatItem from '../components/CatItem';\nimport RestCard from '../components/RestCard.js'\nimport NavBar from '../components/NavBar.js'\nimport TabBar from '../components/TabBar.js'\nimport CartModal from \"../components/CartModal\";\n\nimport staticDB from \"../db/static.json\";\nimport dhspic from '../img/DHS_photo.jpeg';\n\nimport \"../main.css\";\n\nfunction Main() {\n  const curAddr = \"아름관\"\n  const restInfo = staticDB;\n  const [roomInfo, setRoomInfo] = useState([]);\n  const [isUserParticipants, setIsUserParticipants] = useState(false);\n  const catInfoList = [\n    {name: \"Korean\", img:dhspic}, \n    {name: \"Japanese\", img:dhspic},\n    {name: \"Snacks\", img:dhspic},\n    {name: \"Asian\", img:dhspic},\n    {name: \"Salad\", img:dhspic},\n    {name: \"Doshirak\", img:dhspic},\n    {name: \"중국집\", img:dhspic},\n    {name: \"덮밥\", img:dhspic},\n  ]\n\n  const stringToTime = (str) => {\n    const [hour, minute] = str.split(':').map((el) => parseInt(el));\n    return hour * 60 + minute;\n  }\n  const restList = restInfo.filter((rest) => {\n    const nowTime = new Date().getHours() * 60 + new Date().getMinutes();\n    return stringToTime(rest.open) <= nowTime && nowTime <= stringToTime(rest.close);\n  }).map((rest, i) => \n  <li key={i} style={{listStyle:'none'}}>\n     <Link to={`./restaurant/${rest.id}`}><RestCard restInfo={rest} roomInfo={roomInfo}></RestCard></Link>\n  </li>)\n\n  const catList = catInfoList.map((cat, i) => \n      <li key={i} style={{listStyle:'none'}}>\n        <Link to={{\n          pathname:`./filter/${cat.name}`}}> <CatItem img={cat.img} name={cat.name}></CatItem> </Link>\n      </li>\n  )\n  \n  const [myRoomCard, setMyRoomCard] = useState(<></>);\n  const [otherRoomList, setOtherRoomList] = useState(<></>);\n  \n  const { userId } = useParams();\n  const navigate = useNavigate();\n\n  function getRooms() {\n    onSnapshot(collection(db, \"rooms\"), (snapshot) => {\n      const tmp = [];\n      snapshot.forEach((doc) => tmp.push({room_id: doc.id, room: doc.data()}))\n      setRoomInfo(tmp.map(({room, room_id}) => {\n        const roomInfoObj = {\n          'roomId': room_id, 'restName': room.restName,\n          'addr': room.addr, 'ordStat': room.ordStat,\n          'parti': room.parti, 'endTime': room.endTime,\n          'timeLeft': parseInt((room.endTime.seconds - new Date().getTime() / 1000) / 60),\n          'rest': restInfo.filter((rest) => rest.name == room.restName)[0],\n          'poolMon': room.parti.reduce((money, menu) => money + menu.price, 0) \n        }\n        if (room.parti.filter((el) => el.id === userId).length !== 0) {\n          setMyRoomCard(<Link to={{pathname:`./${room_id}`}}> <RoomCard roomInfo={roomInfoObj} photo={true}></RoomCard></Link>)\n          setOtherRoomList(<></>)\n          setIsUserParticipants(true);\n        }\n        return roomInfoObj}));\n      updateDoc(doc(db, \"users\", userId), {\n        curRoomId: \"\"\n      })\n    })\n  }\n\n  useEffect(() => {\n    getRooms();\n  }, []);\n\n  function handleRoomEnter(roomId, restName) {\n    updateDoc(doc(db, \"users\", userId), {\n      curRoomId: roomId\n    })\n    const restId = restInfo.filter(({name}) => name === restName)[0].id\n    if (window.confirm(\"먼저 배달음식을 담아주세요\")) {\n      navigate(`./restaurant/${restId}`)\n    }\n    console.log(roomId)\n  }\n\n  useEffect(() => {\n    if (isUserParticipants) {}\n    else {\n      console.log(roomInfo)\n      setMyRoomCard(<div className=\"mainPage__noYourRoom\">참여하시는 방이 없습니다.</div>)\n      setOtherRoomList(<>\n        <div className = \"mainPage__separation\"/>\n        <div className = \"mainPage__title\">Room Suggestions</div>\n        <ul style={{margin:0}} className = \"mainPage__room-list\">\n            {roomInfo.filter((el) => el.addr === curAddr).map((room, i) => \n            <li key={i} style={{listStyle:'none'}}>\n                <div onClick={() => handleRoomEnter(room.roomId, room.restName)}> <RoomCard roomInfo={room} photo={true}></RoomCard></div>\n            </li>)}\n        </ul></>\n        )\n    }\n\n  }, [roomInfo, isUserParticipants])\n  \n\n  \n  // [Not Solved] 근데 my room 이 생긴 상태의 사람은 suggestion 없애야할듯\n  // for (const room of roomInfo) {\n  //   room['rest'] = restInfo.filter((rest) => rest.name == room.restName)[0];\n  // }\n\n\n  return (\n    <div className=\"ui-container\">\n      <div className=\"mainPage__\">\n        <NavBar/>\n        <div style={{height:\"105px\"}}/>\n        <div className = \"mainPage__title\">Food Categories</div>\n        <ul className = \"mainPage__cat-list\">\n            {catList}\n        </ul>\n        <div className = \"mainPage__separation\"/>\n        <div className = \"mainPage__title\">Your Room</div>\n        <div className = \"mainPage__room-list\">\n            {myRoomCard}\n        </div>\n        {otherRoomList}\n        <div className = \"mainPage__separation\"/>\n        <div className = \"mainPage__title\">Restaurant List</div>\n        <ul style={{margin:0}} className = \"mainPage__rest-card-list\">\n            {restList}\n        </ul>\n        {/* <TabBar/> */}\n      </div>\n    </div>\n      \n  )\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}