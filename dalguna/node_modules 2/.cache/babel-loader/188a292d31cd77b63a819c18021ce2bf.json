{"ast":null,"code":"var _jsxFileName = \"/Users/HS/Documents/GitHub/dalguna/dalguna/dalguna/src/components/MenuAddOptions.js\";\nimport React, { useState } from 'react';\n\nfunction MenuAddOptions(props) {\n  const {\n    name,\n    options,\n    type,\n    totalPrice,\n    setTotalPrice,\n    selectedAddOptions,\n    setSelectedAddOptions\n  } = props; // const [selectedOptions, setSelectedOptions] = useState([])\n\n  var optionList;\n  optionList = options.map((opt, i) => /*#__PURE__*/React.createElement(\"li\", {\n    className: \"menuModal__option-item\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menuModal__option-item-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: type,\n    id: opt.name,\n    value: opt.name,\n    name: \"priceOption\",\n    checked: [...selectedAddOptions].filter(e => e === opt.name).length !== 0,\n    onChange: () => handleSelectedOptionsChange(opt.name, opt.price),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }\n  }), \"\\xA0\\xA0\", opt.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menuModal__option-item-price\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, new Intl.NumberFormat('ko-KR', {\n    style: 'currency',\n    currency: 'KRW'\n  }).format(opt.price))));\n\n  function handleSelectedOptionsChange(name, price) {\n    var copied = [...selectedAddOptions];\n\n    if (copied.filter(e => e === name).length !== 0) {\n      setSelectedAddOptions(copied.filter(e => e !== name));\n      setTotalPrice(totalPrice - price);\n    } else {\n      setSelectedAddOptions([...selectedAddOptions, name]);\n      setTotalPrice(totalPrice + price);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"menuModal__option-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, name), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: \"lighter\",\n      color: \"grey\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 32\n    }\n  }, \"(\\uC120\\uD0DD)\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"menuModal__option-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, optionList));\n}\n\nexport default MenuAddOptions;","map":{"version":3,"sources":["/Users/HS/Documents/GitHub/dalguna/dalguna/dalguna/src/components/MenuAddOptions.js"],"names":["React","useState","MenuAddOptions","props","name","options","type","totalPrice","setTotalPrice","selectedAddOptions","setSelectedAddOptions","optionList","map","opt","i","filter","e","length","handleSelectedOptionsChange","price","Intl","NumberFormat","style","currency","format","copied","fontWeight","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA,UAAvB;AAAmCC,IAAAA,aAAnC;AAAkDC,IAAAA,kBAAlD;AAAsEC,IAAAA;AAAtE,MAAgGP,KAAtG,CAD2B,CAG3B;;AAEA,MAAIQ,UAAJ;AAEAA,EAAAA,UAAU,GAAGN,OAAO,CAACO,GAAR,CAAY,CAACC,GAAD,EAAMC,CAAN,kBACrB;AAAI,IAAA,SAAS,EAAC,wBAAd;AAAuC,IAAA,GAAG,EAAEA,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,IAAI,EAAER,IADV;AAEI,IAAA,EAAE,EAAIO,GAAG,CAACT,IAFd;AAGI,IAAA,KAAK,EAAES,GAAG,CAACT,IAHf;AAII,IAAA,IAAI,EAAC,aAJT;AAKI,IAAA,OAAO,EAAE,CAAC,GAAGK,kBAAJ,EAAwBM,MAAxB,CAAgCC,CAAD,IAAMA,CAAC,KAAKH,GAAG,CAACT,IAA/C,EAAqDa,MAArD,KAAgE,CAL7E;AAMI,IAAA,QAAQ,EAAE,MAAMC,2BAA2B,CAACL,GAAG,CAACT,IAAL,EAAWS,GAAG,CAACM,KAAf,CAN/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,cAQiBN,GAAG,CAACT,IARrB,CADJ,eAWI;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,IAAIgB,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,IAAAA,KAAK,EAAE,UAAT;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAA/B,EACIC,MADJ,CACWX,GAAG,CAACM,KADf,CADL,CAXJ,CADS,CAAb;;AAkBA,WAASD,2BAAT,CAAqCd,IAArC,EAA2Ce,KAA3C,EAAkD;AAC9C,QAAIM,MAAM,GAAG,CAAC,GAAGhB,kBAAJ,CAAb;;AACA,QAAIgB,MAAM,CAACV,MAAP,CAAeC,CAAD,IAAMA,CAAC,KAAKZ,IAA1B,EAAgCa,MAAhC,KAA2C,CAA/C,EAAkD;AAC9CP,MAAAA,qBAAqB,CAACe,MAAM,CAACV,MAAP,CAAeC,CAAD,IAAMA,CAAC,KAAKZ,IAA1B,CAAD,CAArB;AACAI,MAAAA,aAAa,CAACD,UAAU,GAAGY,KAAd,CAAb;AACH,KAHD,MAGO;AACHT,MAAAA,qBAAqB,CAAC,CAAC,GAAGD,kBAAJ,EAAwBL,IAAxB,CAAD,CAArB;AACAI,MAAAA,aAAa,CAACD,UAAU,GAAGY,KAAd,CAAb;AACH;AACJ;;AAGD,sBAAQ,uDACJ;AAAM,IAAA,SAAS,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOf,IAAP,CADJ,eACuB;AAAM,IAAA,KAAK,EAAE;AAACsB,MAAAA,UAAU,EAAC,SAAZ;AAAuBC,MAAAA,KAAK,EAAC;AAA7B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADvB,CADI,eAIJ;AAAI,IAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwChB,UAAxC,CAJI,CAAR;AAMH;;AAED,eAAeT,cAAf","sourcesContent":["import React, { useState } from 'react';\n\nfunction MenuAddOptions(props) {\n    const { name, options, type, totalPrice, setTotalPrice, selectedAddOptions, setSelectedAddOptions } = props;\n\n    // const [selectedOptions, setSelectedOptions] = useState([])\n\n    var optionList;\n\n    optionList = options.map((opt, i) =>\n        <li className=\"menuModal__option-item\" key={i}>\n            <div className=\"menuModal__option-item-name\">\n                <input \n                    type={type}\n                    id = {opt.name}\n                    value={opt.name}\n                    name=\"priceOption\"\n                    checked={[...selectedAddOptions].filter((e)=> e === opt.name).length !== 0}\n                    onChange={() => handleSelectedOptionsChange(opt.name, opt.price)}/>\n                &nbsp;&nbsp;{opt.name}\n            </div>\n            <div className=\"menuModal__option-item-price\">\n                {new Intl.NumberFormat('ko-KR', { style: 'currency', currency: 'KRW' })\n                    .format(opt.price)}\n            </div>\n        </li>)\n\n    function handleSelectedOptionsChange(name, price) {\n        var copied = [...selectedAddOptions]\n        if (copied.filter((e)=> e === name).length !== 0) {\n            setSelectedAddOptions(copied.filter((e)=> e !== name))\n            setTotalPrice(totalPrice - price)\n        } else {\n            setSelectedAddOptions([...selectedAddOptions, name])\n            setTotalPrice(totalPrice + price)\n        }\n    }\n    \n\n    return (<>\n        <span className=\"menuModal__option-title\">\n            <span>{name}</span><span style={{fontWeight:\"lighter\", color:\"grey\"}}>(선택)</span>\n        </span>\n        <ul className=\"menuModal__option-list\">{optionList}</ul>\n    </>)\n}\n\nexport default MenuAddOptions"]},"metadata":{},"sourceType":"module"}